<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Obj\mx7.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Obj\mx7.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 4.1 [Build 791]: Last Updated: Thu Feb 27 17:13:11 2014
<BR><P>
<H3>Maximum Stack Usage =        224 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
CAN_IRQHandler &rArr; remap_can_irqhandler &rArr; isr_can &rArr; can_frame_send &rArr; can_message_set &rArr; can_data_register_write
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[a]">WAKEUP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">WAKEUP_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[16]">ADC_IRQHandler</a> from remap_interrupt.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[18]">BOD_IRQHandler</a> from remap_interrupt.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from remap_interrupt.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[b]">CAN_IRQHandler</a> from remap_interrupt.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from remap_interrupt.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[19]">FMC_IRQHandler</a> from remap_interrupt.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from remap_interrupt.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[d]">I2C_IRQHandler</a> from remap_interrupt.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from remap_interrupt.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from remap_interrupt.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[1d]">PIOINT0_IRQHandler</a> from remap_interrupt.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[1c]">PIOINT1_IRQHandler</a> from remap_interrupt.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[1b]">PIOINT2_IRQHandler</a> from remap_interrupt.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[1a]">PIOINT3_IRQHandler</a> from remap_interrupt.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from remap_interrupt.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[12]">SSP0_IRQHandler</a> from remap_interrupt.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[c]">SSP1_IRQHandler</a> from remap_interrupt.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from remap_interrupt.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from remap_interrupt.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[e]">TIMER16_0_IRQHandler</a> from remap_interrupt.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[f]">TIMER16_1_IRQHandler</a> from remap_interrupt.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[10]">TIMER32_0_IRQHandler</a> from remap_interrupt.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[11]">TIMER32_1_IRQHandler</a> from remap_interrupt.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[13]">UART_IRQHandler</a> from remap_interrupt.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[15]">USB_FIQHandler</a> from remap_interrupt.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[14]">USB_IRQHandler</a> from remap_interrupt.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from remap_interrupt.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[a]">WAKEUP_IRQHandler</a> from startup_lpc11xx.o(.text) referenced 13 times from startup_lpc11xx.o(RESET)
 <LI><a href="#[17]">WDT_IRQHandler</a> from remap_interrupt.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[1f]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_lpc11xx.o(.text)
 <LI><a href="#[1e]">main</a> from main.o(.text) referenced from entry8.o(.ARM.Collect$$$$00000009)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1f]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(.text)
</UL>
<P><STRONG><a name="[c6]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[20]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[c5]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[c7]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[c8]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8.o(.ARM.Collect$$$$00000009))

<P><STRONG><a name="[98]"></a>__enterCirtical</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, can_drv.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__canRegRead
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_circulation_buffer_send
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_frame_send
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_circulation_buffer_read
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_circulation_buffer_malloc
</UL>

<P><STRONG><a name="[99]"></a>__intEnable</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, can_drv.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__canRegRead
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_circulation_buffer_send
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_frame_send
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_circulation_buffer_read
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_circulation_buffer_malloc
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WAKEUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAKEUP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAKEUP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>AHB_clock_enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ahb_clock_ctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_config
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_init
</UL>

<P><STRONG><a name="[c9]"></a>AHB_clock_disable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ahb_clock_ctrl.o(.text), UNUSED)

<P><STRONG><a name="[22]"></a>system_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, system_lpc11xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = system_init
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_oscillator_setup
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_pll_clock_setup
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_setup
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHB_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_init
</UL>

<P><STRONG><a name="[28]"></a>output_clock_setup</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, system_lpc11xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_output_clock
</UL>

<P><STRONG><a name="[27]"></a>config_output_clock</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, test_clock_source.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = config_output_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_clock_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_init
</UL>

<P><STRONG><a name="[2e]"></a>watchdog_enable</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, watchdog.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = watchdog_enable &rArr; watchdog_config
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ca]"></a>watchdog_disable</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, watchdog.o(.text), UNUSED)

<P><STRONG><a name="[2f]"></a>watchdog_reset</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, watchdog.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = watchdog_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_feedvalue_relaod
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[55]"></a>isr_watchdog</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, watchdog.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remap_wdt_irqhandler
</UL>

<P><STRONG><a name="[87]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main_power.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_message_set
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_power_manage
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_power_manage
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_manage
</UL>

<P><STRONG><a name="[30]"></a>mcu_io_init</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, lpc11cxx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mcu_io_init
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHB_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_init
</UL>

<P><STRONG><a name="[47]"></a>gpio_direction_value_set</STRONG> (Thumb, 284 bytes, Stack size 8 bytes, lpc11cxx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_direction_value_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cb]"></a>gpio_data_value_set</STRONG> (Thumb, 284 bytes, Stack size 8 bytes, lpc11cxx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[3a]"></a>gpio_data_value_turn</STRONG> (Thumb, 250 bytes, Stack size 0 bytes, lpc11cxx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_100ms_scheduler
</UL>

<P><STRONG><a name="[cc]"></a>gpio_data_value_get</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, lpc11cxx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[cd]"></a>gpio_interrupt_set</STRONG> (Thumb, 496 bytes, Stack size 16 bytes, lpc11cxx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>gpio_interrupt_enable</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, lpc11cxx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[cf]"></a>gpio_interrupt_disable</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, lpc11cxx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[d0]"></a>gpio_interrupt_satus_get</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, lpc11cxx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>gpio_edge_interrupt_clear</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, lpc11cxx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[35]"></a>systick_config</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, systick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = systick_config &rArr; systick_init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_timer_4ms_init
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_init
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_init
</UL>

<P><STRONG><a name="[37]"></a>isr_systick</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, systick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isr_systick &rArr; timer_4ms
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_4ms
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remap_systick_handler
</UL>

<P><STRONG><a name="[4c]"></a>schedule_timer_4ms</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, systick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_4ms
</UL>

<P><STRONG><a name="[1e]"></a>main</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = main &rArr; main_12ms_scheduler &rArr; can_main &rArr; can_tx_handle &rArr; can_data_send &rArr; can_circulation_buffer_send &rArr; can_frame_send &rArr; can_message_set &rArr; can_data_register_write
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_up_init
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_4ms_scheduler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_12ms_scheduler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_32ms_scheduler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_100ms
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_1s
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_3s
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_10s
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_100ms_scheduler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_reset
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_enable
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_direction_value_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry8.o(.ARM.Collect$$$$00000009)
</UL>
<P><STRONG><a name="[38]"></a>timer_4ms</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_4ms
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_timer_4ms
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_systick
</UL>

<P><STRONG><a name="[d2]"></a>FindBitLocationInBytes</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lib.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>Margin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lib.o(.text), UNUSED)

<P><STRONG><a name="[d4]"></a>Margin8</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lib.o(.text), UNUSED)

<P><STRONG><a name="[d5]"></a>bcd2dec</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lib.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>itoa</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, lib.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>i16toa</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[d7]"></a>strclr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lib.o(.text), UNUSED)

<P><STRONG><a name="[d8]"></a>buffer_clr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lib.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>MEMSET</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MEMSET
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_can_to_mpu_info_cfm
</UL>

<P><STRONG><a name="[d9]"></a>strlen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lib.o(.text), UNUSED)

<P><STRONG><a name="[da]"></a>strcpy</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lib.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>strncpy</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_data_to_mpu_rx_can_buffer
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_can_to_mpu_info_cfm
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_data_to_can_tx_buff
</UL>

<P><STRONG><a name="[db]"></a>strncpy_Int16u</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lib.o(.text), UNUSED)

<P><STRONG><a name="[dc]"></a>memcpy</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lib.o(.text), UNUSED)

<P><STRONG><a name="[dd]"></a>strcat</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lib.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>strncat</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lib.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>strcmp</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lib.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>strncmp</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, lib.o(.text), UNUSED)

<P><STRONG><a name="[e1]"></a>strlen_rom</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lib.o(.text), UNUSED)

<P><STRONG><a name="[e2]"></a>strcpy_rom</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lib.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>charcpy_rom</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lib.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>strncpy_rom</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lib.o(.text), UNUSED)

<P><STRONG><a name="[e5]"></a>memcpy_rom</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lib.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>strcat_rom</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lib.o(.text), UNUSED)

<P><STRONG><a name="[e7]"></a>strncat_rom</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lib.o(.text), UNUSED)

<P><STRONG><a name="[e8]"></a>strcmp_rom</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lib.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>strncmp_rom</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, lib.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>remap_nmi_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>

<P><STRONG><a name="[57]"></a>remap_hardfault_handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, interrupt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[58]"></a>remap_memmanage_handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, interrupt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>

<P><STRONG><a name="[59]"></a>remap_busfault_handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, interrupt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>

<P><STRONG><a name="[5a]"></a>remap_usagefault_handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, interrupt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>

<P><STRONG><a name="[5b]"></a>remap_svc_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[5c]"></a>remap_debugmon_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>

<P><STRONG><a name="[5d]"></a>remap_pendsv_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[4f]"></a>remap_systick_handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = remap_systick_handler &rArr; isr_systick &rArr; timer_4ms
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_systick
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[50]"></a>remap_can_irqhandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = remap_can_irqhandler &rArr; isr_can &rArr; can_frame_send &rArr; can_message_set &rArr; can_data_register_write
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_can
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_IRQHandler
</UL>

<P><STRONG><a name="[5e]"></a>remap_ssp1_irqhandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP1_IRQHandler
</UL>

<P><STRONG><a name="[5f]"></a>remap_i2c_irqhandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IRQHandler
</UL>

<P><STRONG><a name="[60]"></a>remap_timer16_0_irqhandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER16_0_IRQHandler
</UL>

<P><STRONG><a name="[61]"></a>remap_timer16_1_irqhandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER16_1_IRQHandler
</UL>

<P><STRONG><a name="[62]"></a>remap_timer32_0_irqhandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER32_0_IRQHandler
</UL>

<P><STRONG><a name="[63]"></a>remap_timer32_1_irqhandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER32_1_IRQHandler
</UL>

<P><STRONG><a name="[64]"></a>remap_ssp0_irqhandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_IRQHandler
</UL>

<P><STRONG><a name="[52]"></a>remap_uart_irqhandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = remap_uart_irqhandler &rArr; isr_uart &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_uart
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRQHandler
</UL>

<P><STRONG><a name="[65]"></a>remap_usb_irqhandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
</UL>

<P><STRONG><a name="[66]"></a>remap_usb_fiqhandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FIQHandler
</UL>

<P><STRONG><a name="[67]"></a>remap_adc_irqhandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[54]"></a>remap_wdt_irqhandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = remap_wdt_irqhandler
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_watchdog
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_IRQHandler
</UL>

<P><STRONG><a name="[68]"></a>remap_bod_irqhandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOD_IRQHandler
</UL>

<P><STRONG><a name="[69]"></a>remap_fmc_irqhandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_IRQHandler
</UL>

<P><STRONG><a name="[6a]"></a>remap_pioint3_irqhandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIOINT3_IRQHandler
</UL>

<P><STRONG><a name="[6b]"></a>remap_pioint2_irqhandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIOINT2_IRQHandler
</UL>

<P><STRONG><a name="[6c]"></a>remap_pioint1_irqhandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIOINT1_IRQHandler
</UL>

<P><STRONG><a name="[6d]"></a>remap_pioint0_irqhandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIOINT0_IRQHandler
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, remap_interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NMI_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remap_nmi_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, remap_interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HardFault_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remap_hardfault_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, remap_interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MemManage_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remap_memmanage_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, remap_interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BusFault_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remap_busfault_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, remap_interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UsageFault_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remap_usagefault_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, remap_interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SVC_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remap_svc_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, remap_interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DebugMon_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remap_debugmon_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, remap_interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PendSV_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remap_pendsv_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, remap_interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; remap_systick_handler &rArr; isr_systick &rArr; timer_4ms
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remap_systick_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>CAN_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, remap_interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = CAN_IRQHandler &rArr; remap_can_irqhandler &rArr; isr_can &rArr; can_frame_send &rArr; can_message_set &rArr; can_data_register_write
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remap_can_irqhandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SSP1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, remap_interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SSP1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remap_ssp1_irqhandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>I2C_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, remap_interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remap_i2c_irqhandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TIMER16_0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, remap_interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER16_0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remap_timer16_0_irqhandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TIMER16_1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, remap_interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER16_1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remap_timer16_1_irqhandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TIMER32_0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, remap_interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER32_0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remap_timer32_0_irqhandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TIMER32_1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, remap_interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER32_1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remap_timer32_1_irqhandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>SSP0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, remap_interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SSP0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remap_ssp0_irqhandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>UART_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, remap_interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = UART_IRQHandler &rArr; remap_uart_irqhandler &rArr; isr_uart &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remap_uart_irqhandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>USB_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, remap_interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remap_usb_irqhandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>USB_FIQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, remap_interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_FIQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remap_usb_fiqhandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>ADC_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, remap_interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remap_adc_irqhandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>WDT_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, remap_interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WDT_IRQHandler &rArr; remap_wdt_irqhandler
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remap_wdt_irqhandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>BOD_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, remap_interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BOD_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remap_bod_irqhandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>FMC_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, remap_interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FMC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remap_fmc_irqhandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>PIOINT3_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, remap_interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIOINT3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remap_pioint3_irqhandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>PIOINT2_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, remap_interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIOINT2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remap_pioint2_irqhandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>PIOINT1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, remap_interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIOINT1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remap_pioint1_irqhandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>PIOINT0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, remap_interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIOINT0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remap_pioint0_irqhandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>uart_init</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, uart_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = uart_init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHB_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_uart
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_main
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_init
</UL>

<P><STRONG><a name="[72]"></a>uart_data_init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, uart_drv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_main
</UL>

<P><STRONG><a name="[6e]"></a>uart_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart_drv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_uart
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_main
</UL>

<P><STRONG><a name="[8e]"></a>uart_disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart_drv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_power_req
</UL>

<P><STRONG><a name="[7a]"></a>uart_rx_frame_buff_full</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, uart_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uart_rx_frame_buff_full
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_checksum
</UL>

<P><STRONG><a name="[c4]"></a>mpu_rx_can_frame_buff_full</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, uart_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mpu_rx_can_frame_buff_full
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_data_to_mpu_rx_can_buffer
</UL>

<P><STRONG><a name="[81]"></a>uart_tx_buffer_space</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, uart_drv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_package_proc
</UL>

<P><STRONG><a name="[53]"></a>isr_uart</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, uart_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = isr_uart &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_enable
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remap_uart_irqhandler
</UL>

<P><STRONG><a name="[ea]"></a>mpu_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mpu.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>mpu_main</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = mpu_main &rArr; mpu_rx_buffer_analyse &rArr; mpu_checksum &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_tx_handle
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_rx_handle
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_rx_buffer_analyse
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_power_ready
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_message
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_hardware_init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_enable
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_data_init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_12ms_scheduler
</UL>

<P><STRONG><a name="[77]"></a>mpu_to_can_cmd</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mpu_to_can_cmd &rArr; post_message
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_message
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_data_to_can_tx_buff
</UL>

<P><STRONG><a name="[73]"></a>mpu_rx_buffer_analyse</STRONG> (Thumb, 530 bytes, Stack size 72 bytes, mpu_rx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = mpu_rx_buffer_analyse &rArr; mpu_checksum &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_main
</UL>

<P><STRONG><a name="[74]"></a>mpu_rx_handle</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, mpu_rx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mpu_rx_handle &rArr; transfer_data_to_can_tx_buff &rArr; can_circulation_buffer_write &rArr; can_circulation_buffer_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_data_to_can_tx_buff
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_null
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_main
</UL>

<P><STRONG><a name="[76]"></a>mpu_tx_handle</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, mpu_tx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = mpu_tx_handle &rArr; mpu_package_proc &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_can_to_mpu_info_cfm
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_mpu_cmd_null
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_package_proc
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_tx_start
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_main
</UL>

<P><STRONG><a name="[3e]"></a>power_timer_100ms</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main_power.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_100ms
</UL>

<P><STRONG><a name="[3c]"></a>power_timer_1s</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main_power.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_1s
</UL>

<P><STRONG><a name="[88]"></a>poweroff_request</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main_power.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_manage
</UL>

<P><STRONG><a name="[8c]"></a>poweron_request</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main_power.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_manage
</UL>

<P><STRONG><a name="[8a]"></a>main_power_state</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main_power.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_power_manage
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_power_manage
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_manage
</UL>

<P><STRONG><a name="[41]"></a>power_manage</STRONG> (Thumb, 314 bytes, Stack size 8 bytes, main_power.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = power_manage &rArr; mpu_power_manage &rArr; mpu_power_req
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_power_manage
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_power_manage
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_power_state
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poweron_request
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poweroff_request
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poweroff_enter
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poweroff_start
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_12ms_scheduler
</UL>

<P><STRONG><a name="[eb]"></a>mpu_reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mpu_power.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>mpu_poweroff_delay</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mpu_power.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_power_req
</UL>

<P><STRONG><a name="[71]"></a>mpu_power_ready</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mpu_power.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_main
</UL>

<P><STRONG><a name="[8d]"></a>mpu_power_req</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mpu_power.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mpu_power_req
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_poweroff_delay
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_power_manage
</UL>

<P><STRONG><a name="[85]"></a>mpu_power_manage</STRONG> (Thumb, 208 bytes, Stack size 8 bytes, mpu_power.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mpu_power_manage &rArr; mpu_power_req
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_power_req
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_end
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_start
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_power_state
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_manage
</UL>

<P><STRONG><a name="[ec]"></a>can_reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, can_power.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>can_poweroff_delay</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, can_power.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_power_req
</UL>

<P><STRONG><a name="[aa]"></a>can_power_ready</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, can_power.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_main
</UL>

<P><STRONG><a name="[92]"></a>can_power_req</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, can_power.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = can_power_req
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_poweroff_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_power_manage
</UL>

<P><STRONG><a name="[86]"></a>can_power_manage</STRONG> (Thumb, 208 bytes, Stack size 8 bytes, can_power.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = can_power_manage &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_power_req
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_reset_end
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_reset_start
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_power_state
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_manage
</UL>

<P><STRONG><a name="[78]"></a>post_message</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, message.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = post_message
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_to_mpu_cmd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_to_can_cmd
</UL>

<P><STRONG><a name="[ed]"></a>post_new_message</STRONG> (Thumb, 164 bytes, Stack size 36 bytes, message.o(.text), UNUSED)

<P><STRONG><a name="[ee]"></a>insert_message</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, message.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>get_message</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, message.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_message
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_main
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_main
</UL>

<P><STRONG><a name="[ef]"></a>query_message</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, message.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>clear_message</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, message.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_hardware_init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;message_init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_hardware_init
</UL>

<P><STRONG><a name="[96]"></a>message_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, message.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_message
</UL>

<P><STRONG><a name="[97]"></a>can_circulation_buffer_read</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = can_circulation_buffer_read
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__intEnable
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__enterCirtical
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_circulation_buffer_send
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_can
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_main
</UL>

<P><STRONG><a name="[9a]"></a>can_node_bus_on</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = can_node_bus_on &rArr; can_interrupt_enable &rArr; __canRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_enable
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_clear
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_node_state_check
</UL>

<P><STRONG><a name="[9f]"></a>can_user_interrupt_control</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = can_user_interrupt_control &rArr; can_interrupt_enable &rArr; __canRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_register
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_enable
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__canIntNumberGet
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_user_init
</UL>

<P><STRONG><a name="[a2]"></a>can_read_message_object_set</STRONG> (Thumb, 610 bytes, Stack size 88 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = can_read_message_object_set &rArr; __canRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__canRegWrite
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__canRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_accept_filter_set
</UL>

<P><STRONG><a name="[a5]"></a>can_accept_filter_set</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = can_accept_filter_set &rArr; can_read_message_object_set &rArr; __canRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_read_message_object_set
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_user_init
</UL>

<P><STRONG><a name="[a6]"></a>can_user_init</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = can_user_init &rArr; can_accept_filter_set &rArr; can_read_message_object_set &rArr; __canRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_enable
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_bit_timing_set
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_accept_filter_set
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_user_interrupt_control
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_main
</UL>

<P><STRONG><a name="[43]"></a>can_main</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = can_main &rArr; can_tx_handle &rArr; can_data_send &rArr; can_circulation_buffer_send &rArr; can_frame_send &rArr; can_message_set &rArr; can_data_register_write
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_handle
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_handle
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_user_init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_circulation_buffer_read
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_hardware_init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_node_state_check
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_power_ready
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_message
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_12ms_scheduler
</UL>

<P><STRONG><a name="[ad]"></a>can_to_mpu_cmd</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = can_to_mpu_cmd &rArr; post_message
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_message
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_data_to_mpu_rx_can_buffer
</UL>

<P><STRONG><a name="[3f]"></a>can_timer_100ms</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_100ms
</UL>

<P><STRONG><a name="[f0]"></a>can_circulation_buffer_init</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>can_circulation_buffer_write</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = can_circulation_buffer_write &rArr; can_circulation_buffer_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_circulation_buffer_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_data_to_can_tx_buff
</UL>

<P><STRONG><a name="[f1]"></a>can_node_create</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>can_node_call_back_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[af]"></a>can_frame_send</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = can_frame_send &rArr; can_message_set &rArr; can_data_register_write
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_retry_set
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_message_set
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__intEnable
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__enterCirtical
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_circulation_buffer_send
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_can
</UL>

<P><STRONG><a name="[b2]"></a>can_circulation_buffer_send</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = can_circulation_buffer_send &rArr; can_frame_send &rArr; can_message_set &rArr; can_data_register_write
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__intEnable
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__enterCirtical
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_frame_send
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_circulation_buffer_read
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_data_send
</UL>

<P><STRONG><a name="[51]"></a>isr_can</STRONG> (Thumb, 562 bytes, Stack size 88 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = isr_can &rArr; can_frame_send &rArr; can_message_set &rArr; can_data_register_write
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_status_get
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_message_get
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_status
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_disable
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_clear
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_frame_send
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_circulation_buffer_read
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_circulation_buffer_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remap_can_irqhandler
</UL>

<P><STRONG><a name="[b7]"></a>can_data_send</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = can_data_send &rArr; can_circulation_buffer_send &rArr; can_frame_send &rArr; can_message_set &rArr; can_data_register_write
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_circulation_buffer_send
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_handle
</UL>

<P><STRONG><a name="[bb]"></a>assert_param</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, can_drv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_message_clear
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_err_cntr_get
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_retry_get
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_bit_timing_get
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_disable
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_status_get
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_retry_set
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_message_set
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_message_get
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_status
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_register
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_enable
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_disable
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_clear
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_enable
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_bit_timing_set
</UL>

<P><STRONG><a name="[ba]"></a>CANBaseValid</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, can_drv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_message_clear
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_err_cntr_get
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_retry_get
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_bit_timing_get
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_disable
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_status_get
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_retry_set
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_message_set
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_message_get
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_status
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_register
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_enable
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_disable
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_clear
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_enable
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_bit_timing_set
</UL>

<P><STRONG><a name="[a1]"></a>__canIntNumberGet</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, can_drv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_register
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_user_interrupt_control
</UL>

<P><STRONG><a name="[a3]"></a>__canRegRead</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, can_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __canRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__intEnable
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__enterCirtical
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_message_clear
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_err_cntr_get
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_retry_get
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_bit_timing_get
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_disable
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_data_register_read
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_status_get
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_retry_set
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_message_set
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_message_get
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_status
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_enable
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_disable
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_clear
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_enable
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_bit_timing_set
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_read_message_object_set
</UL>

<P><STRONG><a name="[a4]"></a>__canRegWrite</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, can_drv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_message_clear
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_disable
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_data_register_write
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_status_get
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_retry_set
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_message_set
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_message_get
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_enable
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_disable
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_clear
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_enable
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_bit_timing_set
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_read_message_object_set
</UL>

<P><STRONG><a name="[b8]"></a>can_data_register_write</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, can_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = can_data_register_write
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__canRegWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_message_set
</UL>

<P><STRONG><a name="[b9]"></a>can_data_register_read</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, can_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = can_data_register_read &rArr; __canRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__canRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_message_get
</UL>

<P><STRONG><a name="[a7]"></a>can_init</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, can_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = can_init &rArr; __canRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANBaseValid
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_param
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__canRegWrite
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__canRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_user_init
</UL>

<P><STRONG><a name="[9b]"></a>can_enable</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, can_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = can_enable &rArr; __canRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANBaseValid
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_param
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__canRegWrite
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__canRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_user_init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_node_bus_on
</UL>

<P><STRONG><a name="[bc]"></a>can_disable</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, can_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANBaseValid
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_param
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__canRegWrite
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__canRegRead
</UL>

<P><STRONG><a name="[bd]"></a>can_bit_timing_get</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, can_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANBaseValid
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_param
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__canRegRead
</UL>

<P><STRONG><a name="[a8]"></a>can_bit_timing_set</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, can_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = can_bit_timing_set &rArr; __canRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANBaseValid
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_param
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__canRegWrite
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__canRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_user_init
</UL>

<P><STRONG><a name="[be]"></a>interrupt_register</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, can_drv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_register
</UL>

<P><STRONG><a name="[a0]"></a>can_interrupt_register</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, can_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = can_interrupt_register
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_register
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANBaseValid
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_param
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__canIntNumberGet
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_user_interrupt_control
</UL>

<P><STRONG><a name="[9d]"></a>can_interrupt_enable</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, can_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = can_interrupt_enable &rArr; __canRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANBaseValid
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_param
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__canRegWrite
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__canRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_user_interrupt_control
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_node_bus_on
</UL>

<P><STRONG><a name="[b5]"></a>can_interrupt_disable</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, can_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = can_interrupt_disable &rArr; __canRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANBaseValid
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_param
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__canRegWrite
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__canRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_can
</UL>

<P><STRONG><a name="[b3]"></a>can_interrupt_status</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, can_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = can_interrupt_status &rArr; __canRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANBaseValid
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_param
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__canRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_can
</UL>

<P><STRONG><a name="[9c]"></a>can_interrupt_clear</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, can_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = can_interrupt_clear &rArr; __canRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANBaseValid
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_param
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__canRegWrite
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__canRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_node_bus_on
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_can
</UL>

<P><STRONG><a name="[b0]"></a>can_retry_set</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, can_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = can_retry_set &rArr; __canRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANBaseValid
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_param
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__canRegWrite
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__canRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_frame_send
</UL>

<P><STRONG><a name="[bf]"></a>can_retry_get</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, can_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANBaseValid
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_param
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__canRegRead
</UL>

<P><STRONG><a name="[b4]"></a>can_status_get</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, can_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = can_status_get &rArr; __canRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANBaseValid
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_param
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__canRegWrite
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__canRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_can
</UL>

<P><STRONG><a name="[c0]"></a>can_err_cntr_get</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, can_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANBaseValid
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_param
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__canRegRead
</UL>

<P><STRONG><a name="[b1]"></a>can_message_set</STRONG> (Thumb, 584 bytes, Stack size 56 bytes, can_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = can_message_set &rArr; can_data_register_write
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_data_register_write
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANBaseValid
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_param
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__canRegWrite
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__canRegRead
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_frame_send
</UL>

<P><STRONG><a name="[b6]"></a>can_message_get</STRONG> (Thumb, 576 bytes, Stack size 48 bytes, can_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = can_message_get &rArr; can_data_register_read &rArr; __canRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_data_register_read
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANBaseValid
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_param
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__canRegWrite
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__canRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_can
</UL>

<P><STRONG><a name="[c1]"></a>can_message_clear</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, can_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANBaseValid
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_param
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__canRegWrite
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__canRegRead
</UL>

<P><STRONG><a name="[ac]"></a>can_tx_handle</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, can_tx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = can_tx_handle &rArr; can_data_send &rArr; can_circulation_buffer_send &rArr; can_frame_send &rArr; can_message_set &rArr; can_data_register_write
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_can_cmd_null
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_data_send
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_main
</UL>

<P><STRONG><a name="[ab]"></a>can_rx_handle</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, can_rx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = can_rx_handle &rArr; transfer_data_to_mpu_rx_can_buffer &rArr; can_to_mpu_cmd &rArr; post_message
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_data_to_mpu_rx_can_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_main
</UL>

<P><STRONG><a name="[f3]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[33]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_init
</UL>

<P><STRONG><a name="[f4]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_package_proc
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_tx_start
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_checksum
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_rx_buffer_analyse
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_uart
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i16toa
</UL>

<P><STRONG><a name="[21]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[f5]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[f6]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[f7]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[f8]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[31]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lpc11cxx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_init
</UL>

<P><STRONG><a name="[25]"></a>system_clock_setup</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, system_lpc11xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[24]"></a>main_pll_clock_setup</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, system_lpc11xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[23]"></a>system_oscillator_setup</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, system_lpc11xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[32]"></a>systick_init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, systick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = systick_init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
</UL>

<P><STRONG><a name="[36]"></a>schedule_timer_4ms_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, systick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
</UL>

<P><STRONG><a name="[34]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, systick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_init
</UL>

<P><STRONG><a name="[2d]"></a>watchdog_feedvalue_relaod</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, watchdog.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_reset
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_config
</UL>

<P><STRONG><a name="[2c]"></a>watchdog_workmode_set</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, watchdog.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_config
</UL>

<P><STRONG><a name="[2b]"></a>watchdog_timer_set</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, watchdog.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_config
</UL>

<P><STRONG><a name="[2a]"></a>watchdog_clock_setup</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, watchdog.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_config
</UL>

<P><STRONG><a name="[29]"></a>watchdog_config</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, watchdog.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = watchdog_config
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_clock_setup
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_timer_set
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_workmode_set
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_feedvalue_relaod
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHB_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_enable
</UL>

<P><STRONG><a name="[39]"></a>main_100ms_scheduler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = main_100ms_scheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_data_value_turn
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4b]"></a>timer_10s</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4a]"></a>timer_3s</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3b]"></a>timer_1s</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_1s
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_timer_1s
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3d]"></a>timer_100ms</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_100ms
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_timer_100ms
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_timer_100ms
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[49]"></a>main_32ms_scheduler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[40]"></a>main_12ms_scheduler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = main_12ms_scheduler &rArr; can_main &rArr; can_tx_handle &rArr; can_data_send &rArr; can_circulation_buffer_send &rArr; can_frame_send &rArr; can_message_set &rArr; can_data_register_write
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_manage
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_main
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_main
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[48]"></a>main_4ms_scheduler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[46]"></a>start_up_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[44]"></a>mcu_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mcu_init &rArr; uart_init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_output_clock
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6f]"></a>mpu_hardware_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mpu_hardware_init
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_message
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_main
</UL>

<P><STRONG><a name="[79]"></a>mpu_checksum</STRONG> (Thumb, 312 bytes, Stack size 48 bytes, mpu_rx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = mpu_checksum &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_frame_buff_full
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_rx_buffer_analyse
</UL>

<P><STRONG><a name="[7e]"></a>cmd_null</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mpu_rx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_rx_handle
</UL>

<P><STRONG><a name="[7b]"></a>transfer_data_to_can_tx_buff</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, mpu_rx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = transfer_data_to_can_tx_buff &rArr; can_circulation_buffer_write &rArr; can_circulation_buffer_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_circulation_buffer_write
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_to_can_cmd
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_rx_handle
</UL>

<P><STRONG><a name="[7f]"></a>mpu_tx_start</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mpu_tx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mpu_tx_start &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_tx_handle
</UL>

<P><STRONG><a name="[80]"></a>mpu_package_proc</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, mpu_tx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = mpu_package_proc &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_buffer_space
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_tx_handle
</UL>

<P><STRONG><a name="[84]"></a>mcu_mpu_cmd_null</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mpu_tx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_tx_handle
</UL>

<P><STRONG><a name="[82]"></a>mcu_can_to_mpu_info_cfm</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, mpu_tx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mcu_can_to_mpu_info_cfm &rArr; MEMSET
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMSET
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_tx_handle
</UL>

<P><STRONG><a name="[89]"></a>poweroff_start</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main_power.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_manage
</UL>

<P><STRONG><a name="[8b]"></a>poweroff_enter</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main_power.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_manage
</UL>

<P><STRONG><a name="[91]"></a>mpu_reset_start</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mpu_power.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_power_manage
</UL>

<P><STRONG><a name="[90]"></a>mpu_reset_end</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mpu_power.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_power_manage
</UL>

<P><STRONG><a name="[95]"></a>can_reset_start</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, can_power.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_power_manage
</UL>

<P><STRONG><a name="[94]"></a>can_reset_end</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, can_power.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_power_manage
</UL>

<P><STRONG><a name="[9e]"></a>can_node_state_check</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = can_node_state_check &rArr; can_node_bus_on &rArr; can_interrupt_enable &rArr; __canRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_node_bus_on
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_main
</UL>

<P><STRONG><a name="[a9]"></a>can_hardware_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can_hardware_init
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_message
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_main
</UL>

<P><STRONG><a name="[ae]"></a>can_circulation_buffer_malloc</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = can_circulation_buffer_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__intEnable
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__enterCirtical
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_circulation_buffer_write
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_can
</UL>

<P><STRONG><a name="[c2]"></a>mcu_can_cmd_null</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, can_tx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_handle
</UL>

<P><STRONG><a name="[c3]"></a>transfer_data_to_mpu_rx_can_buffer</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, can_rx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = transfer_data_to_mpu_rx_can_buffer &rArr; can_to_mpu_cmd &rArr; post_message
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_to_mpu_cmd
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_rx_can_frame_buff_full
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_handle
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
